// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/Skarlso/gtui/models"
	"github.com/Skarlso/gtui/pkg/providers"
)

type FakeGithub struct {
	GetProjectStub        func(context.Context, int64) (*models.Project, error)
	getProjectMutex       sync.RWMutex
	getProjectArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getProjectReturns struct {
		result1 *models.Project
		result2 error
	}
	getProjectReturnsOnCall map[int]struct {
		result1 *models.Project
		result2 error
	}
	ListProjectsStub        func(context.Context, string, *models.ListOptions) ([]*models.Project, error)
	listProjectsMutex       sync.RWMutex
	listProjectsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *models.ListOptions
	}
	listProjectsReturns struct {
		result1 []*models.Project
		result2 error
	}
	listProjectsReturnsOnCall map[int]struct {
		result1 []*models.Project
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGithub) GetProject(arg1 context.Context, arg2 int64) (*models.Project, error) {
	fake.getProjectMutex.Lock()
	ret, specificReturn := fake.getProjectReturnsOnCall[len(fake.getProjectArgsForCall)]
	fake.getProjectArgsForCall = append(fake.getProjectArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetProjectStub
	fakeReturns := fake.getProjectReturns
	fake.recordInvocation("GetProject", []interface{}{arg1, arg2})
	fake.getProjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGithub) GetProjectCallCount() int {
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	return len(fake.getProjectArgsForCall)
}

func (fake *FakeGithub) GetProjectCalls(stub func(context.Context, int64) (*models.Project, error)) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = stub
}

func (fake *FakeGithub) GetProjectArgsForCall(i int) (context.Context, int64) {
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	argsForCall := fake.getProjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGithub) GetProjectReturns(result1 *models.Project, result2 error) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = nil
	fake.getProjectReturns = struct {
		result1 *models.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeGithub) GetProjectReturnsOnCall(i int, result1 *models.Project, result2 error) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = nil
	if fake.getProjectReturnsOnCall == nil {
		fake.getProjectReturnsOnCall = make(map[int]struct {
			result1 *models.Project
			result2 error
		})
	}
	fake.getProjectReturnsOnCall[i] = struct {
		result1 *models.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeGithub) ListProjects(arg1 context.Context, arg2 string, arg3 *models.ListOptions) ([]*models.Project, error) {
	fake.listProjectsMutex.Lock()
	ret, specificReturn := fake.listProjectsReturnsOnCall[len(fake.listProjectsArgsForCall)]
	fake.listProjectsArgsForCall = append(fake.listProjectsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *models.ListOptions
	}{arg1, arg2, arg3})
	stub := fake.ListProjectsStub
	fakeReturns := fake.listProjectsReturns
	fake.recordInvocation("ListProjects", []interface{}{arg1, arg2, arg3})
	fake.listProjectsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGithub) ListProjectsCallCount() int {
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	return len(fake.listProjectsArgsForCall)
}

func (fake *FakeGithub) ListProjectsCalls(stub func(context.Context, string, *models.ListOptions) ([]*models.Project, error)) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = stub
}

func (fake *FakeGithub) ListProjectsArgsForCall(i int) (context.Context, string, *models.ListOptions) {
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	argsForCall := fake.listProjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGithub) ListProjectsReturns(result1 []*models.Project, result2 error) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = nil
	fake.listProjectsReturns = struct {
		result1 []*models.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeGithub) ListProjectsReturnsOnCall(i int, result1 []*models.Project, result2 error) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = nil
	if fake.listProjectsReturnsOnCall == nil {
		fake.listProjectsReturnsOnCall = make(map[int]struct {
			result1 []*models.Project
			result2 error
		})
	}
	fake.listProjectsReturnsOnCall[i] = struct {
		result1 []*models.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeGithub) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGithub) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ providers.Github = new(FakeGithub)
